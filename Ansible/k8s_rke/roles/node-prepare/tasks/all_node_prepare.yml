- name: set hostname
  ansible.builtin.shell: "hostnamectl set-hostname {{inventory_hostname}}"

- name: change /etc/hosts
  ansible.builtin.template:
    src: ./templates/etc-host.j2
    dest: /etc/hosts
    owner: root
    group: root
    mode: "0644"

- name: update & upgrade
  ansible.builtin.apt:
    upgrade: yes
    update_cache: yes
    state: latest

- name: install necessary packages
  ansible.builtin.apt:
    pkg:
    - curl
    - apt-transport-https
    - ca-certificates
    - software-properties-common
    update_cache: yes
    state: latest

- name: disable SWAP (1/2)
  ansible.builtin.shell: swapoff -a

- name: disable SWAP (2/2)
  ansible.builtin.replace:
    path: /etc/fstab
    regexp: '^([^#].*?\sswap\s+sw\s+.*)$'
    replace: '# \1'

- name: add modules (1/2)
  ansible.builtin.template:
    src: ./templates/modules-k8s-conf.j2
    dest: /etc/modules-load.d/10-rke2.conf
    owner: root
    group: root
    mode: "0644"

- name: add modules (2/2)
  ansible.builtin.shell: |
    modprobe br_netfilter
    modprobe overlay

- name: change linux core params (1/2)
  ansible.builtin.template:
    src: ./templates/sysctld-k8s-conf.j2
    dest: /etc/sysctl.d/10-rke2.conf
    owner: root
    group: root
    mode: "0644"

- name: change linux core params (2/2)
  ansible.builtin.shell: |
    sysctl --system

- name: setup systemd network (1/2)
  ansible.builtin.copy:
    src: ./templates/flannel.link
    dest: /etc/systemd/network/10-flannel.link
    owner: root
    group: root
    mode: '0644'

- name: setup systemd network (2/2)
  ansible.builtin.shell: |
    systemctl restart systemd-networkd

- name: setup NetworkManager (1/3)
  ansible.builtin.file:
    path: /etc/NetworkManager/conf.d
    state: directory
  when: network_manager_system|bool == true

- name: setup NetworkManager (2/3)
  ansible.builtin.copy:
    src: ./templates/rke2-canal.conf
    dest: /etc/NetworkManager/conf.d/10-rke2-canal.conf
    owner: root
    group: root
    mode: '0644'
  when: network_manager_system|bool == true

- name: setup NetworkManager (3/3)
  ansible.builtin.shell: |
    systemctl reload NetworkManager
  when: network_manager_system|bool == true

- name: rebooting all nodes for applying updates
  ansible.builtin.shell: |
    sleep 5 && shutdown -r now
  async: 1
  poll: 0
  when: reboot_after_prepared|bool == true

- name: waiting for the boot
  wait_for_connection:
    connect_timeout: 10
    sleep: 5
    delay: 5
    timeout: 300
  when: reboot_after_prepared|bool == true