- name: copy systemd etcd conf
  ansible.builtin.copy:
    src: ./templates/20-etcd-service-manager.conf
    dest: /etc/systemd/system/kubelet.service.d/20-etcd-service-manager.conf
    owner: root
    group: root
    mode: '0644'

- name:  daemon-reload and restart kubelet
  ansible.builtin.systemd:
    daemon_reload: yes
    state: restarted
    name: kubelet

- name: template kubeadm.sh on etcd0
  ansible.builtin.template:
    src: ./templates/kubeadm-sh.j2
    dest: /tmp/kubeadm.sh
    owner: root
    group: root
    mode: "0644"
  run_once: true

- name: generate kubeadmcfg.yaml on etcd0 for each etcd
  ansible.builtin.shell: |
    bash /tmp/kubeadm.sh
  run_once: true

- name: generate CA on etcd0
  ansible.builtin.shell: |
    kubeadm init phase certs etcd-ca
  run_once: true

- name: create certificates for each etcd member on etcd0
  ansible.builtin.shell: |
    kubeadm init phase certs etcd-server --config=/tmp/{{hostvars[groups['etcd'][2]].ansible_default_ipv4.address}}/kubeadmcfg.yaml
    kubeadm init phase certs etcd-peer --config=/tmp/{{hostvars[groups['etcd'][2]].ansible_default_ipv4.address}}/kubeadmcfg.yaml
    kubeadm init phase certs etcd-healthcheck-client --config=/tmp/{{hostvars[groups['etcd'][2]].ansible_default_ipv4.address}}/kubeadmcfg.yaml
    kubeadm init phase certs apiserver-etcd-client --config=/tmp/{{hostvars[groups['etcd'][2]].ansible_default_ipv4.address}}/kubeadmcfg.yaml
    cp -R /etc/kubernetes/pki /tmp/{{hostvars[groups['etcd'][2]].ansible_default_ipv4.address}}/
    find /etc/kubernetes/pki -not -name ca.crt -not -name ca.key -type f -delete
    kubeadm init phase certs etcd-server --config=/tmp/{{hostvars[groups['etcd'][1]].ansible_default_ipv4.address}}/kubeadmcfg.yaml
    kubeadm init phase certs etcd-peer --config=/tmp/{{hostvars[groups['etcd'][1]].ansible_default_ipv4.address}}/kubeadmcfg.yaml
    kubeadm init phase certs etcd-healthcheck-client --config=/tmp/{{hostvars[groups['etcd'][1]].ansible_default_ipv4.address}}/kubeadmcfg.yaml
    kubeadm init phase certs apiserver-etcd-client --config=/tmp/{{hostvars[groups['etcd'][1]].ansible_default_ipv4.address}}/kubeadmcfg.yaml
    cp -R /etc/kubernetes/pki /tmp/{{hostvars[groups['etcd'][1]].ansible_default_ipv4.address}}/
    find /etc/kubernetes/pki -not -name ca.crt -not -name ca.key -type f -delete
    kubeadm init phase certs etcd-server --config=/tmp/{{hostvars[groups['etcd'][0]].ansible_default_ipv4.address}}/kubeadmcfg.yaml
    kubeadm init phase certs etcd-peer --config=/tmp/{{hostvars[groups['etcd'][0]].ansible_default_ipv4.address}}/kubeadmcfg.yaml
    kubeadm init phase certs etcd-healthcheck-client --config=/tmp/{{hostvars[groups['etcd'][0]].ansible_default_ipv4.address}}/kubeadmcfg.yaml
    kubeadm init phase certs apiserver-etcd-client --config=/tmp/{{hostvars[groups['etcd'][0]].ansible_default_ipv4.address}}/kubeadmcfg.yaml
    find /tmp/{{hostvars[groups['etcd'][2]].ansible_default_ipv4.address}} -name ca.key -type f -delete
    find /tmp/{{hostvars[groups['etcd'][1]].ansible_default_ipv4.address}} -name ca.key -type f -delete
  run_once: true

- name: copy certificates from etcd0 to other etcd nodes (1/2)
  ansible.builtin.shell: |
    scp -r -o "ConnectTimeout 50" -o "StrictHostKeyChecking no" /tmp/{{hostvars[groups['etcd'][1]].ansible_default_ipv4.address}}/* {{ansible_user}}@{{hostvars[groups['etcd'][1]].ansible_default_ipv4.address}}:
    scp -r -o "ConnectTimeout 50" -o "StrictHostKeyChecking no" /tmp/{{hostvars[groups['etcd'][2]].ansible_default_ipv4.address}}/* {{ansible_user}}@{{hostvars[groups['etcd'][2]].ansible_default_ipv4.address}}:
  run_once: true

- name: copy certificates from etcd0 to other etcd nodes (2/2)
  ansible.builtin.shell: |
    chown -R root:root /home/{{ansible_user}}/pki
    mv /home/{{ansible_user}}/pki /etc/kubernetes/
  when: "inventory_hostname == groups['etcd'][1] or inventory_hostname == groups['etcd'][2]"

- name: copy certificates from etcd0 to all master
  ansible.builtin.shell: |
    scp -r -o "ConnectTimeout 50" -o "StrictHostKeyChecking no" /etc/kubernetes/pki/etcd/ca.crt {{ansible_user}}@{{hostvars[groups['master'][0]].ansible_default_ipv4.address}}:
    scp -r -o "ConnectTimeout 50" -o "StrictHostKeyChecking no" /etc/kubernetes/pki/apiserver-etcd-client.crt {{ansible_user}}@{{hostvars[groups['master'][0]].ansible_default_ipv4.address}}:
    scp -r -o "ConnectTimeout 50" -o "StrictHostKeyChecking no" /etc/kubernetes/pki/apiserver-etcd-client.key {{ansible_user}}@{{hostvars[groups['master'][0]].ansible_default_ipv4.address}}:
    scp -r -o "ConnectTimeout 50" -o "StrictHostKeyChecking no" /etc/kubernetes/pki/etcd/ca.crt {{ansible_user}}@{{hostvars[groups['master'][1]].ansible_default_ipv4.address}}:
    scp -r -o "ConnectTimeout 50" -o "StrictHostKeyChecking no" /etc/kubernetes/pki/apiserver-etcd-client.crt {{ansible_user}}@{{hostvars[groups['master'][1]].ansible_default_ipv4.address}}:
    scp -r -o "ConnectTimeout 50" -o "StrictHostKeyChecking no" /etc/kubernetes/pki/apiserver-etcd-client.key {{ansible_user}}@{{hostvars[groups['master'][1]].ansible_default_ipv4.address}}:
    scp -r -o "ConnectTimeout 50" -o "StrictHostKeyChecking no" /etc/kubernetes/pki/etcd/ca.crt {{ansible_user}}@{{hostvars[groups['master'][2]].ansible_default_ipv4.address}}:
    scp -r -o "ConnectTimeout 50" -o "StrictHostKeyChecking no" /etc/kubernetes/pki/apiserver-etcd-client.crt {{ansible_user}}@{{hostvars[groups['master'][2]].ansible_default_ipv4.address}}:
    scp -r -o "ConnectTimeout 50" -o "StrictHostKeyChecking no" /etc/kubernetes/pki/apiserver-etcd-client.key {{ansible_user}}@{{hostvars[groups['master'][2]].ansible_default_ipv4.address}}:
  run_once: true

- name: init etcd cluster (1/2)
  ansible.builtin.shell: |
    kubeadm init phase etcd local --config=/tmp/{{hostvars[groups['etcd'][0]].ansible_default_ipv4.address}}/kubeadmcfg.yaml
  when: "inventory_hostname == groups['etcd'][0]"

- name: init etcd cluster (2/2)
  ansible.builtin.shell: |
    kubeadm init phase etcd local --config=/home/{{ansible_user}}/kubeadmcfg.yaml
  when: "inventory_hostname == groups['etcd'][1] or inventory_hostname == groups['etcd'][2]"
